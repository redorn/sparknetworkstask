import json
import pandas as pd
import numpy as np
from setup_db import setup_db
from ext_tblmetadata import *
from pkg_etl_utils import bulk_load
import variables

def ext_flat_json(load_id,engine,file_name,ext_table):
    
    df_data = []
    
    try:
        for line in open(file_name):
            df_data.append(json.loads(line)['data'])

        df_data = pd.DataFrame.from_records(df_data)
        df_data = df_data[[
                "contactFormType",
                "creation",
                "id",
                "modification",
                "publishDate",
                "xlink_href",
                "adLinkForJSONP_xlink_href",
                "adLinkForXMLData_xlink_href",
                "companyWideCustomerId",
                "contactDetails_id",
                "contactDetails_address_city",
                "contactDetails_address_houseNumber",
                "contactDetails_address_postcode",
                "contactDetails_address_street",
                "contactDetails_cellPhoneNumber",
                "contactDetails_cellPhoneNumberAreaCode",
                "contactDetails_cellPhoneNumberCountryCode",
                "contactDetails_cellPhoneNumberSubscriber",
                "contactDetails_company",
                "contactDetails_countryCode",
                "contactDetails_email",
                "contactDetails_faxNumber",
                "contactDetails_faxNumberAreaCode",
                "contactDetails_faxNumberCountryCode",
                "contactDetails_faxNumberSubscriber",
                "contactDetails_firstname",
                "contactDetails_homepageUrl",
                "contactDetails_lastname",
                "contactDetails_phoneNumber",
                "contactDetails_phoneNumberAreaCode",
                "contactDetails_phoneNumberCountryCode",
                "contactDetails_phoneNumberSubscriber",
                "contactDetails_salutation",
                "contactFormConfiguration_addressField",
                "contactFormConfiguration_applicationPackageCompletedField",
                "contactFormConfiguration_emailAddressField",
                "contactFormConfiguration_employmentRelationshipField",
                "contactFormConfiguration_firstnameField",
                "contactFormConfiguration_freemiumSettings_duration",
                "contactFormConfiguration_incomeField",
                "contactFormConfiguration_lastnameField",
                "contactFormConfiguration_messageField",
                "contactFormConfiguration_moveInDateField",
                "contactFormConfiguration_numberOfPersonsField",
                "contactFormConfiguration_petsInHouseholdField",
                "contactFormConfiguration_phoneNumberField",
                "contactFormConfiguration_premiumProfileRequired",
                "contactFormConfiguration_salutationField",
                "imprintLink_xlink_href",
                "realEstate_id",
                "realEstate_xsi_type",
                "realEstate_address_city",
                "realEstate_address_geoHierarchy_city_fullGeoCodeId",
                "realEstate_address_geoHierarchy_city_geoCodeId",
                "realEstate_address_geoHierarchy_city_name",
                "realEstate_address_geoHierarchy_continent_fullGeoCodeId",
                "realEstate_address_geoHierarchy_continent_geoCodeId",
                "realEstate_address_geoHierarchy_country_fullGeoCodeId",
                "realEstate_address_geoHierarchy_country_geoCodeId",
                "realEstate_address_geoHierarchy_country_name",
                "realEstate_address_geoHierarchy_neighbourhood_geoCodeId",
                "realEstate_address_geoHierarchy_quarter_fullGeoCodeId",
                "realEstate_address_geoHierarchy_quarter_geoCodeId",
                "realEstate_address_geoHierarchy_quarter_name",
                "realEstate_address_geoHierarchy_region_fullGeoCodeId",
                "realEstate_address_geoHierarchy_region_geoCodeId",
                "realEstate_address_geoHierarchy_region_name",
                "realEstate_address_postcode",
                "realEstate_address_quarter",
                "realEstate_apartmentType",
                "realEstate_assistedLiving",
                "realEstate_attachments",
                "realEstate_balcony",
                "realEstate_baseRent",
                "realEstate_buildingEnergyRatingType",
                "realEstate_builtInKitchen",
                "realEstate_calculatedTotalRent",
                "realEstate_calculatedTotalRentScope",
                "realEstate_cellar",
                "realEstate_certificateOfEligibilityNeeded",
                "realEstate_condition",
                "realEstate_constructionYear",
                "realEstate_courtage_hasCourtage",
                "realEstate_creationDate",
                "realEstate_deposit",
                "realEstate_descriptionNote",
                "realEstate_energyCertificate_energyCertificateAvailability",
                "realEstate_energyCertificate_energyCertificateCreationDate",
                "realEstate_energyConsumptionContainsWarmWater",
                "realEstate_energyPerformanceCertificate",
                "realEstate_externalId",
                "realEstate_floor",
                "realEstate_floorplan",
                "realEstate_freeFrom",
                "realEstate_furnishingNote",
                "realEstate_garden",
                "realEstate_guestToilet",
                "realEstate_handicappedAccessible",
                "realEstate_heatingCosts",
                "realEstate_heatingCostsInServiceCharge",
                "realEstate_heatingType",
                "realEstate_heatingTypeEnev2014",
                "realEstate_interiorQuality",
                "realEstate_lastModificationDate",
                "realEstate_lastRefurbishment",
                "realEstate_lift",
                "realEstate_livingSpace",
                "realEstate_locationNote",
                "realEstate_numberOfFloors",
                "realEstate_numberOfRooms",
                "realEstate_otherNote",
                "realEstate_petsAllowed",
                "realEstate_referencePriceApiCall",
                "realEstate_referencePriceServiceCall",
                "realEstate_serviceCharge",
                "realEstate_state",
                "realEstate_thermalCharacteristic",
                "realEstate_title",
                "realEstate_titlePicture_creation",
                "realEstate_titlePicture_id",
                "realEstate_titlePicture_modification",
                "realEstate_titlePicture_publishDate",
                "realEstate_titlePicture_floorplan",
                "realEstate_titlePicture_title",
                "realEstate_titlePicture_titlePicture",
                "realEstate_titlePicture_urls",
                "realEstate_totalRent",
                "realEstate_useAsFlatshareRoom",
                "realtorValuationJSONLink_xlink_href",
                "realtorValuationV2JSONLink_xlink_href",
                "realtorValuationV2JSONPLink_xlink_href"
        ]].apply(lambda x: x.replace('([^\w\s\d.,$#@!%^&*:=+()\-"]+)|(\r)|(\n)','', regex = True).str.strip()
                     if x.dtype == "object" else x)
        print('Extract: JSON has been parsed successfully...')
    except Exception as e:
        print('Extract: Failed to parse json!'+ str(e))
        
    try:
        bulk_load(load_id,engine,JData,df_data,";")
        print('Extract: JSON has been uploaded to STG table!')
    except Exception as e:
        print('Extract: Failed to load parsed json in DB!'+ str(e))